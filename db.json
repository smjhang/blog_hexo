{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/jacman/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.eot","path":"font/fontdiao.eot","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.ttf","path":"font/fontdiao.ttf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.woff","path":"font/fontdiao.woff","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/author.jpg","path":"img/author.jpg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","path":"img/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","path":"img/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc.svg","path":"img/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nd.svg","path":"img/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-sa.svg","path":"img/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by.svg","path":"img/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-zero.svg","path":"img/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/jacman.jpg","path":"img/jacman.jpg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/scrollup.png","path":"img/scrollup.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/gallery.js","path":"js/gallery.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","path":"js/jquery.qrcode-0.12.0.min.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.svg","path":"font/fontdiao.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/banner.jpg","path":"img/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/jacman/.gitignore","hash":"7d65523f2a5afb69d76824dd1dfa62a34faa3197","modified":1469634099363},{"_id":"themes/jacman/LICENSE","hash":"931516aa36c53eb7843c83d82662eb50cc3c4367","modified":1469634099363},{"_id":"themes/jacman/README.md","hash":"832d77c14b7bf0ac5e949fcca46ab57a3af3ec91","modified":1469634099363},{"_id":"themes/jacman/README_zh.md","hash":"41480e35a26cdd26da09a39c5c25b377887eadcb","modified":1469634099363},{"_id":"themes/jacman/_config.yml","hash":"8e5071b4d3b118c1564453eed97329682c409167","modified":1469635720275},{"_id":"source/_posts/redis-notification.md","hash":"291054a2aa8a7ea3dc7635635d9f514e952dbe25","modified":1470251190933},{"_id":"source/categories/index.md","hash":"0502d74d0c62add87541cc327aea9c78ca911c3e","modified":1469630955915},{"_id":"source/search/index.md","hash":"9d32eb480fc44814e7c5c5122665626c3fa0fdc9","modified":1469630955915},{"_id":"source/tags/index.md","hash":"a248f366f795bbd623da6105282911c254c179cc","modified":1469630955915},{"_id":"themes/jacman/.git/FETCH_HEAD","hash":"5b1c5955cad9e4ecec00021d2efc7d1213fb07cd","modified":1469634154755},{"_id":"themes/jacman/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1469634099339},{"_id":"themes/jacman/.git/ORIG_HEAD","hash":"38095d7820812161e7ec08e02f3194f2fde69b00","modified":1469634154779},{"_id":"themes/jacman/.git/config","hash":"be0a8da17af044443c4ba0add02e1cedebd88957","modified":1469634099339},{"_id":"themes/jacman/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1469634091671},{"_id":"themes/jacman/.git/index","hash":"2c52db8cf6defafeddf68d1b3a59c7d151e07a7a","modified":1469634104423},{"_id":"themes/jacman/.git/packed-refs","hash":"4c67966da91179d1636cdf53e7680736c920ac16","modified":1469634099339},{"_id":"themes/jacman/languages/default.yml","hash":"eea72d6138497287c0b3f4bd93e4f6f62b7aff37","modified":1469634099363},{"_id":"themes/jacman/languages/zh-CN.yml","hash":"1f3b9d00dd4322352b0c9c82a76dc9865a616d41","modified":1469634099363},{"_id":"themes/jacman/languages/zh-TW.yml","hash":"61a02ba818d641579a86fcd7f5926ab1e6ab5f70","modified":1469634099363},{"_id":"themes/jacman/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1469634099367},{"_id":"themes/jacman/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1469634099367},{"_id":"themes/jacman/layout/index.ejs","hash":"75cef2172c286994af412e11ab7f4f5a0daaf1f5","modified":1469634099367},{"_id":"themes/jacman/layout/layout.ejs","hash":"5b4289a4526899809b9c2facea535367ff51ba2b","modified":1469634099367},{"_id":"themes/jacman/layout/page.ejs","hash":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1469634099367},{"_id":"themes/jacman/layout/post.ejs","hash":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1469634099367},{"_id":"themes/jacman/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1469634099367},{"_id":"themes/jacman/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1469634099367},{"_id":"themes/jacman/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1469634091671},{"_id":"themes/jacman/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1469634091671},{"_id":"themes/jacman/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1469634091671},{"_id":"themes/jacman/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1469634091671},{"_id":"themes/jacman/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1469634091671},{"_id":"themes/jacman/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1469634091671},{"_id":"themes/jacman/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1469634091671},{"_id":"themes/jacman/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1469634091671},{"_id":"themes/jacman/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1469634091671},{"_id":"themes/jacman/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1469634091671},{"_id":"themes/jacman/.git/logs/HEAD","hash":"1dae58daa36cd5bb1e7f26c53669fba5e2aa4cf0","modified":1469634099339},{"_id":"themes/jacman/layout/_partial/after_footer.ejs","hash":"c703b0c25139b8a5f8f9d24a334a07905e2b7987","modified":1469634099363},{"_id":"themes/jacman/layout/_partial/analytics.ejs","hash":"697601996220fe0a0f9cd628be67dec3c86ae2aa","modified":1469634099363},{"_id":"themes/jacman/layout/_partial/archive.ejs","hash":"2c7395e7563fe016521712a645c28a13f952d52a","modified":1469634099363},{"_id":"themes/jacman/layout/_partial/article.ejs","hash":"261ecacb8456f4cb972632b6a9103860fa63b9a3","modified":1469634099363},{"_id":"themes/jacman/layout/_partial/article_row.ejs","hash":"4cb855d91ece7f67b2ca0992fffa55472d0b9c93","modified":1469634099363},{"_id":"themes/jacman/layout/_partial/categories.ejs","hash":"8a52d0344d5bce1925cf586ed73c11192925209b","modified":1469634099363},{"_id":"themes/jacman/layout/_partial/footer.ejs","hash":"5f80bf6c6ddcf8c28c4599cd1540b14b25d54f18","modified":1469634099363},{"_id":"themes/jacman/layout/_partial/head.ejs","hash":"761941be4922cd3c177c8130296b909bf7db5c09","modified":1469634099363},{"_id":"themes/jacman/layout/_partial/header.ejs","hash":"18515612344ff048b9372b91b7eef6f3b143801f","modified":1469634099363},{"_id":"themes/jacman/layout/_partial/mathjax.ejs","hash":"d42994ac696f52ba99c1cbac382cd76d5b04a3e8","modified":1469634099363},{"_id":"themes/jacman/layout/_partial/pagination.ejs","hash":"6146ac37dfb4f8613090bc52b3fc8cfa911a186a","modified":1469634099363},{"_id":"themes/jacman/layout/_partial/search.ejs","hash":"1083824a6c6c3df02767f2f3b727aee78ebb76ec","modified":1469634099367},{"_id":"themes/jacman/layout/_partial/sidebar.ejs","hash":"c4f527fff0070fbe65919053a16224412317f40d","modified":1469634099367},{"_id":"themes/jacman/layout/_partial/tags.ejs","hash":"b33b2b5d08f1d53a8de25a95f660f7f1cea7b3cb","modified":1469634099367},{"_id":"themes/jacman/layout/_partial/tinysou_search.ejs","hash":"06ecddc8a9d40b480fe2e958af1dab857a9d5441","modified":1469634099367},{"_id":"themes/jacman/layout/_partial/totop.ejs","hash":"bea5bb7cb9350b8af7d97a8d223af63a5b30ab78","modified":1469634099367},{"_id":"themes/jacman/layout/_widget/archive.ejs","hash":"39ea6b7888406fbd1b4cf236ebd718e881493374","modified":1469634099367},{"_id":"themes/jacman/layout/_widget/category.ejs","hash":"c1fae96b5053da021bcc04ab2ce5c2c8d30de8a2","modified":1469634099367},{"_id":"themes/jacman/layout/_widget/douban.ejs","hash":"e3820c36169e88663e6c9177666b2904c1ce47e6","modified":1469634099367},{"_id":"themes/jacman/layout/_widget/github-card.ejs","hash":"5c759b6ea214bac56a393247de27e67ce73fb33f","modified":1469634099367},{"_id":"themes/jacman/layout/_widget/links.ejs","hash":"e49868063439c2092cdf9a8ec82cc295b0e42f66","modified":1469634099367},{"_id":"themes/jacman/layout/_widget/rss.ejs","hash":"0a4b5f2a2e36a1d504fe2e7c6c8372cbb4628aab","modified":1469634099367},{"_id":"themes/jacman/layout/_widget/tag.ejs","hash":"7e82ad9c916b9ce871b2f65ce8f283c5ba47947b","modified":1469634099367},{"_id":"themes/jacman/layout/_widget/tagcloud.ejs","hash":"10a1001189d5c28ce6d42494563b9637c302b454","modified":1469634099367},{"_id":"themes/jacman/layout/_widget/weibo.ejs","hash":"a31c2b223d0feb2a227e203cac9e5d13b7d328a8","modified":1469634099367},{"_id":"themes/jacman/source/css/style.styl","hash":"a0a45af186a72ae68979bf26f2a5d0d2303189ca","modified":1469634099367},{"_id":"themes/jacman/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1469634099367},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1469634099367},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1469634099367},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1469634099367},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1469634099367},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1469634099367},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1469634099371},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1469634099371},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1469634099371},{"_id":"themes/jacman/source/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1469634099371},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1469634099371},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1469634099375},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1469634099375},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1469634099375},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1469634099379},{"_id":"themes/jacman/source/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1469634099379},{"_id":"themes/jacman/source/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1469634099379},{"_id":"themes/jacman/source/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1469634099379},{"_id":"themes/jacman/source/img/author.jpg","hash":"2a292e681b4c6c975eec9c8c356d99647a465542","modified":1469634099379},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1469634099379},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1469634099383},{"_id":"themes/jacman/source/img/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1469634099383},{"_id":"themes/jacman/source/img/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1469634099383},{"_id":"themes/jacman/source/img/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1469634099383},{"_id":"themes/jacman/source/img/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1469634099383},{"_id":"themes/jacman/source/img/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1469634099383},{"_id":"themes/jacman/source/img/favicon.ico","hash":"2d22a3e0c7905a894e832c831dd91c29c209c7a5","modified":1469634099383},{"_id":"themes/jacman/source/img/jacman.jpg","hash":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1469634099383},{"_id":"themes/jacman/source/img/logo.svg","hash":"9ae38f7225c38624faeb7b74996efa9de7bf065b","modified":1469634099383},{"_id":"themes/jacman/source/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1469634099383},{"_id":"themes/jacman/source/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1469634099383},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1469634099383},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","hash":"57c3987166a26415a71292162690e82c21e315ad","modified":1469634099383},{"_id":"themes/jacman/source/js/totop.js","hash":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1469634099383},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","hash":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1469634099375},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1469634099379},{"_id":"themes/jacman/source/font/fontdiao.svg","hash":"334a94e6a66a8b089be7315d876bec93efe38d2b","modified":1469634099379},{"_id":"themes/jacman/source/img/logo.png","hash":"fd08d12d1fa147cf894e8f8327e38f1758de32ed","modified":1469634099383},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","hash":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1469634099383},{"_id":"themes/jacman/.git/objects/pack/pack-236194cd2d651978d87044c40b609426681687a7.idx","hash":"155b933b95159b410256637dd71fcb3cc6d1caae","modified":1469634099275},{"_id":"themes/jacman/.git/refs/heads/master","hash":"38095d7820812161e7ec08e02f3194f2fde69b00","modified":1469634099339},{"_id":"themes/jacman/layout/_partial/post/article.ejs","hash":"b09e3acea7076e1f01dfe0c2295e19951ea09437","modified":1469634099363},{"_id":"themes/jacman/layout/_partial/post/catetags.ejs","hash":"0e37bababc8f4659f5b59a552a946b46d89e4158","modified":1469634099363},{"_id":"themes/jacman/layout/_partial/post/comment.ejs","hash":"c88bc8f5805173920a5fdd7e9234a850e3d8e151","modified":1469634099363},{"_id":"themes/jacman/layout/_partial/post/footer.ejs","hash":"b12ec08a5845a3d8c01257614f1dfead879c87d2","modified":1469634099367},{"_id":"themes/jacman/layout/_partial/post/gallery.ejs","hash":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1469634099367},{"_id":"themes/jacman/layout/_partial/post/header.ejs","hash":"36a705942b691abe0d643ea8afa339981b32f6f2","modified":1469634099367},{"_id":"themes/jacman/layout/_partial/post/jiathis.ejs","hash":"d7f5960039ac74924559ab6ba03c64457b8f0966","modified":1469634099367},{"_id":"themes/jacman/layout/_partial/post/pagination.ejs","hash":"7de9c07a4c968429a8088c31a28b7f3a993ded1b","modified":1469634099367},{"_id":"themes/jacman/source/css/_base/font.styl","hash":"c8a0faf43b08e37ad07a5669db76d595da966159","modified":1469634099367},{"_id":"themes/jacman/source/css/_base/public.styl","hash":"f016180726019927b9a835ed01e04d153f27a149","modified":1469634099367},{"_id":"themes/jacman/source/css/_base/variable.styl","hash":"cb652eb83c28a208743fabab92de896f8b7cbf7b","modified":1469634099367},{"_id":"themes/jacman/source/css/_partial/article.styl","hash":"c69641b4a34a8c62986b335414413dbde26de25e","modified":1469634099367},{"_id":"themes/jacman/source/css/_partial/aside.styl","hash":"506fde1d67ce750452cbe84bee01a19c7d027c5e","modified":1469634099367},{"_id":"themes/jacman/source/css/_partial/duoshuo.styl","hash":"e85f1192283f043115c272a9deb3cb6ced793990","modified":1469634099367},{"_id":"themes/jacman/source/css/_partial/footer.styl","hash":"1911613a19b605a58f801c21b03b5d4c83b90f9c","modified":1469634099367},{"_id":"themes/jacman/source/css/_partial/gallery.styl","hash":"7246809f4ce3166ec1b259bf475cae1a48e29aad","modified":1469634099367},{"_id":"themes/jacman/source/css/_partial/header.styl","hash":"5121ceb712be3f2dde98b8b6e589b546e19eab8f","modified":1469634099367},{"_id":"themes/jacman/source/css/_partial/helper.styl","hash":"1136600932b97534b88465bf05ef313630b2de3d","modified":1469634099367},{"_id":"themes/jacman/source/css/_partial/index.styl","hash":"a72ff14effd276015264f870f47ed8f8413bf5d3","modified":1469634099367},{"_id":"themes/jacman/source/css/_partial/totop.styl","hash":"96363d7c5aaed5f649667fc0752a62620a67e872","modified":1469634099367},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1469634099371},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1469634099371},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1469634099371},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1469634099371},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1469634099371},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1469634099371},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1469634099379},{"_id":"themes/jacman/source/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1469634099379},{"_id":"themes/jacman/.git/logs/refs/heads/master","hash":"1dae58daa36cd5bb1e7f26c53669fba5e2aa4cf0","modified":1469634099339},{"_id":"themes/jacman/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1469634099339},{"_id":"themes/jacman/source/css/_base/highlight/highlight.styl","hash":"91b62bfc58390b0d5db782a75be6965ee3665eb3","modified":1469634099367},{"_id":"themes/jacman/source/css/_base/highlight/theme.styl","hash":"e3a59bd427ba37a54ead9eeba9a5356b3f720a48","modified":1469634099367},{"_id":"themes/jacman/.git/logs/refs/remotes/origin/HEAD","hash":"1dae58daa36cd5bb1e7f26c53669fba5e2aa4cf0","modified":1469634099339},{"_id":"themes/jacman/.git/objects/pack/pack-236194cd2d651978d87044c40b609426681687a7.pack","hash":"4263cbad22ee504652c1489f0017c6c3f442836b","modified":1469634099275},{"_id":"public/atom.xml","hash":"bf23e4b5367102c3878778e0b67cbdd3acbc2039","modified":1470251296935},{"_id":"public/sitemap.xml","hash":"5fe1e1de9671c0990e319776b0496e98f7c7b398","modified":1470251297078},{"_id":"public/categories/index.html","hash":"2fb28e2d34f25fbd539166158fa13b80271145dc","modified":1470250073476},{"_id":"public/search/index.html","hash":"7722fcdaeece259329b0245b6309739b939c5c46","modified":1470250073476},{"_id":"public/tags/index.html","hash":"c8b0728011e1861a9d1e36239f80738439ebacbb","modified":1470250073476},{"_id":"public/archives/index.html","hash":"9daf2953e28e80809c9935067fd52a43c002bb5d","modified":1470250073477},{"_id":"public/archives/2016/index.html","hash":"2811877b5589feee546c0d58c0cbadb358880a4d","modified":1470250073477},{"_id":"public/archives/2016/07/index.html","hash":"5af02115116a68c08da883341506aad537148e6d","modified":1470250073477},{"_id":"public/tags/redis/index.html","hash":"19fc1f46e2350cd9551bd4666713fe71bad23e5c","modified":1470250073477},{"_id":"public/2016/07/27/redis-notification/index.html","hash":"13fcde5f3fe3257d9645f96c064ac8ca95b5cbe2","modified":1470251297082},{"_id":"public/index.html","hash":"c4e98fbf0d2011a29bb780570ff3ee0f312b3f31","modified":1470251297082},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1470250073488},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1470250073488},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1470250073488},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1470250073488},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1470250073489},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1470250073489},{"_id":"public/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1470250073489},{"_id":"public/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1470250073489},{"_id":"public/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1470250073489},{"_id":"public/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1470250073489},{"_id":"public/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1470250073489},{"_id":"public/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1470250073490},{"_id":"public/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1470250073490},{"_id":"public/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1470250073490},{"_id":"public/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1470250073490},{"_id":"public/img/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1470250073490},{"_id":"public/img/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1470250073491},{"_id":"public/img/author.jpg","hash":"2a292e681b4c6c975eec9c8c356d99647a465542","modified":1470250073491},{"_id":"public/img/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1470250073492},{"_id":"public/img/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1470250073492},{"_id":"public/img/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1470250073492},{"_id":"public/img/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1470250073492},{"_id":"public/img/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1470250073492},{"_id":"public/img/favicon.ico","hash":"2d22a3e0c7905a894e832c831dd91c29c209c7a5","modified":1470250073493},{"_id":"public/img/jacman.jpg","hash":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1470250073493},{"_id":"public/img/logo.svg","hash":"9ae38f7225c38624faeb7b74996efa9de7bf065b","modified":1470250073493},{"_id":"public/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1470250073493},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1470250073493},{"_id":"public/font/coveredbyyourgrace-webfont.svg","hash":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1470250074307},{"_id":"public/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1470250074308},{"_id":"public/font/fontdiao.svg","hash":"334a94e6a66a8b089be7315d876bec93efe38d2b","modified":1470250074311},{"_id":"public/img/logo.png","hash":"fd08d12d1fa147cf894e8f8327e38f1758de32ed","modified":1470250074311},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1470250074317},{"_id":"public/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1470250074317},{"_id":"public/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1470250074317},{"_id":"public/js/totop.js","hash":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1470250074318},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1470250074318},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1470250074318},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1470250074318},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1470250074318},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1470250074318},{"_id":"public/css/style.css","hash":"51681ee0e97277bb852aafa4b47c86a0c3e89d54","modified":1470250074318},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1470250074318},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1470250074318},{"_id":"public/js/jquery.qrcode-0.12.0.min.js","hash":"57c3987166a26415a71292162690e82c21e315ad","modified":1470250074318},{"_id":"public/js/jquery-2.0.3.min.js","hash":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1470250074319},{"_id":"public/font/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1470250074326},{"_id":"public/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1470250074326}],"Category":[],"Data":[],"Page":[{"layout":"categories","title":"categories","_content":"","source":"categories/index.md","raw":"layout: categories\ntitle: categories\n---","date":"2016-07-27T14:49:15.915Z","updated":"2016-07-27T14:49:15.915Z","path":"categories/index.html","comments":1,"_id":"cirf8xks700031zgfludi18ty","content":"","excerpt":"","more":""},{"layout":"search","title":"search","_content":"","source":"search/index.md","raw":"layout: search\ntitle: search\n---","date":"2016-07-27T14:49:15.915Z","updated":"2016-07-27T14:49:15.915Z","path":"search/index.html","comments":1,"_id":"cirf8xks800041zgfurvak0ug","content":"","excerpt":"","more":""},{"layout":"tags","title":"tags","_content":"","source":"tags/index.md","raw":"layout: tags\ntitle: tags\n---","date":"2016-07-27T14:49:15.915Z","updated":"2016-07-27T14:49:15.915Z","path":"tags/index.html","comments":1,"_id":"cirf8xksa00051zgfhjinpfdm","content":"","excerpt":"","more":""}],"Post":[{"title":"Redis Notification","date":"2016-07-27T14:49:42.000Z","_content":"# 簡介\n在實現事件驅動設計的過程中，能夠讓資料庫在異動資料時自動發出通知是一個重要的環節，如此一來就不需要有另外一支程式不斷去查詢資料庫的異動，可以節省系統資源。\n本篇探討將使用 redis 的 keyspace notification 功能來實現資料異動的即時通知，並且以 PHP 程式來實作。\n本篇將會以一個線上購物網站的物品庫存清單為例，展示如何實作即時顯示當前貨品庫存量的功能。\n\n# redis 資料結構規劃\n商品的資料儲存在 product:#id 的 hash，\n並建立一個 set 用來維護商品清單。\n\n|data type | key          | description  |\n|----------|--------------|------------  |\n|set       | product_ids  | 商品總類清單   |\n|hash      | product:#id  | 商品細節      |\n<caption>表1: 資料結構規劃</caption>\n\n<caption>建立 redis 資料</capion>\n\n    HMSET product:1 name \"多力多滋組合包-綜合 54g*4包/組\" price 55 stock 256\n    HMSET product:2 name \"【洋芋片】Lays樂事瑞士香濃起司 97g/包\" price 32 stock 179\n    HMSET product:3 name \"【蔓莓纖果】萬歲牌蔓莓纖果150G\"  price 59 stock 326\n    HMSET product:4 name \"【蒜香青豆】盛香珍蒜香青豆 240g/包\" price 42 stock 324\n    HMSET product:5 name \"【義美】義美小泡芙（檸檬風味）171g/盒\" price 64 stock 64\n    HMSET product:6 name \"【洋芋片】波的多超厚切洋芋片-蚵仔煎味\" price 53 stock 182\n    HMSET product:7 name \"【義美】義美小蛋卷（原味）\" price 49 stock 313\n    HMSET product:8 name \"品客碳烤BBQ口味洋芋片\" price 55 stock 158\n    SADD products 1\n    SADD products 2\n    SADD products 3\n    SADD products 4\n    SADD products 5\n    SADD products 6\n    SADD products 7\n    SADD products 8\n\n# redis keyspace notification \n為了讓物品庫存數量能即時反應到應用程式，必須讓資料庫將資料的異動反應給應用程式，\n這邊說明如何使用 redis 的 keyspace notification 功能來實現異動事件通知。\n至於更詳細的說明可以看 [官網說明文件][1]。\n[1]: http://redis.io/topics/notifications  \"Redis Keyspace Notifications\"\n\nkeyspace notification 可讓應用程式訂閱 keyspace 更動的事件，\n當 redis 的資料有異動的時候有兩種類型的事件會被觸發：\n1. 第一種讓我們可以監聽某個 key 是否被異動，當它被異動的時候，我們可以得知異動這個 key 的命令類型，稱為 keyspace 事件。\n2. 第二種讓我們可以監聽是否有某個命令類型被執行，當它被執行時，透過這個事件，我們可以得知被這個命令影響到的 key，稱為 keyevent 事件。\n\nRedis 的事件通知是透過 PUB/SUB 來進行的，因此再使用前需先了解 Redis PUB/SUB 是如何進行的。\n可以參考官網的文件 [Redis PUB/SUB][2]。簡單來說就是一個客戶端訂閱了某個 channel, 另外一個客戶端可以發佈訊息到這個 channel, \n然後前面那個訂閱的客戶端就可以收到第二個客戶端發送過來的訊息了。在 Redis keyspace notification 的應用中，Redis 會負責發佈訊息到指定的 channel, 我們只要接收這些訊息就可以了。\n後面會討論這些 channel。\n\n[2]: http://redis.io/topics/pubsub \"Redis PUB/SUB\"\n\n在使用 keyspace notification 前，需要先打開這個功能，編輯 redis.conf 將 notify-keyspace-events 設成：\n    \n    notify-keyspace-events \"KEA\"\n    \n根據官網的說明，\nK - Keyspace events\nE - Keyevent event\nA - All commands\nKEA 代表要訂閱所有命令類型的第一種和第二種事件。\n更改設定檔要重啟 redis 後才會生效。\n\nredis 的事件通知是透過 PUB/SUB 來進行的，因此當上述兩種事件發生的時候，redis 會分別發佈訊息到以下兩種 channel 上：\n    1. PUBLISH __keyspace@<db id>__:<key name> <command type>\n    2. PUBLISH __keyevent@<db id>__:<command type> <key name> \n\n我們可以透過 PSUBSCRIBE 來訂閱這些事件：\n    1. PSUBSCRIBE __keyspace@*__:*\n    2. PSUBSCRIBE __keyevent@*__:*\n\n假設我們要觀察 del test1 test2 test3 test4 指令對 keyspace 和 keyevent 的影響可以分別訂閱以下兩個 channel\n\n    127.0.0.1:6379> PSUBSCRIBE __keyspace@*__:test*\n    Reading messages... (press Ctrl-C to quit)\n    1) \"psubscribe\"\n    2) \"__keyspace@*__:test*\"\n    3) (integer) 1\n    \n    127.0.0.1:6379> PSUBSCRIBE __keyevent@*__:del\n    Reading messages... (press Ctrl-C to quit)\n    1) \"psubscribe\"\n    2) \"__keyevent@*__:del\"\n    3) (integer) 1\n    \n設定要處理的 key\n    \n    127.0.0.1:6379> set test1 test1\n    OK\n    127.0.0.1:6379> set test2 test2\n    OK\n    127.0.0.1:6379> set test3 test3\n    OK\n    127.0.0.1:6379> set test4 test4\n    \n注意我這邊開了三個 terminal，分別執行三個 redis-cli，一個監聽對 test* 的異動，一個監聽 del 操作是否被執行，最後一個負責下各種指令。 \n\n在建立過程中，可以看到對 keyspace 的監聽訊息如下：\n\n    127.0.0.1:6379> PSUBSCRIBE __keyspace@*__:test*\n    Reading messages... (press Ctrl-C to quit)\n    1) \"psubscribe\"\n    2) \"__keyspace@*__:test*\"\n    3) (integer) 1\n    1) \"pmessage\"\n    2) \"__keyspace@*__:test*\"\n    3) \"__keyspace@0__:test1\"\n    4) \"set\"\n    1) \"pmessage\"\n    2) \"__keyspace@*__:test*\"\n    3) \"__keyspace@0__:test2\"\n    4) \"set\"\n    1) \"pmessage\"\n    2) \"__keyspace@*__:test*\"\n    3) \"__keyspace@0__:test3\"\n    4) \"set\"\n    1) \"pmessage\"\n    2) \"__keyspace@*__:test*\"\n    3) \"__keyspace@0__:test4\"\n    4) \"set\"\n\n注意 ```127.0.0.1:6379> PSUBSCRIBE __keyevent@*__:del``` 那個 redis-cli 沒有任何更新，因為沒有任何 del 操作被執行。\n現在刪除 test, tests, test3, test4：\n\n    127.0.0.1:6379> del test1 test2 test3 test4\n    (integer) 4\n\n可以看到對 keyspace (```127.0.0.1:6379> PSUBSCRIBE __keyspace@*__:test*```) 的監聽如下：\n    \n    1) \"pmessage\"\n    2) \"__keyspace@*__:test*\"\n    3) \"__keyspace@0__:test1\"\n    4) \"del\"\n    1) \"pmessage\"\n    2) \"__keyspace@*__:test*\"\n    3) \"__keyspace@0__:test2\"\n    4) \"del\"\n    1) \"pmessage\"\n    2) \"__keyspace@*__:test*\"\n    3) \"__keyspace@0__:test3\"\n    4) \"del\"\n    1) \"pmessage\"\n    2) \"__keyspace@*__:test*\"\n    3) \"__keyspace@0__:test4\"\n    4) \"del\"\n\n對 keyevent (```127.0.0.1:6379> PSUBSCRIBE __keyevent@*__:del```)的監聽如下：\n    \n    1) \"pmessage\"\n    2) \"__keyevent@*__:del\"\n    3) \"__keyevent@0__:del\"\n    4) \"test1\"\n    1) \"pmessage\"\n    2) \"__keyevent@*__:del\"\n    3) \"__keyevent@0__:del\"\n    4) \"test2\"\n    1) \"pmessage\"\n    2) \"__keyevent@*__:del\"\n    3) \"__keyevent@0__:del\"\n    4) \"test3\"\n    1) \"pmessage\"\n    2) \"__keyevent@*__:del\"\n    3) \"__keyevent@0__:del\"\n    4) \"test4\"\n\n從上面的結果我們可以知道一個命令對多個 key 的操作，是會引發多次 keyspace 事件和 keyevent 事件的。\n然後我們透過這些事件只能知道是甚麼 key 被影響、被甚麼指令影響，而不知道 key 被異動後的資料，如果想要知道 key 的最新資料則要自己再去讀取那個 key。\n\n# 使用 Predis 在 PHP 中操作 redis\n\n建立一個 redis-notify 專案\n    \n    mkdir redis-notofy\n\n我們這邊使用 composer 來取得 Predis Async, 使用非同步版本的 Predis 比較適合這種監聽事件的任務。\n關於 composer 的使用可以參考 [composer 官網說明文件][3]。\n關於 Predis Async 的介紹可以參考 [Predis Async][4]。\n[3]: https://getcomposer.org/  \"Composer\"\n[4]: https://packagist.org/packages/predis/predis\n在該專案內建立 composer.json 如下：\n\n    {\n      \"require\":{\"predis/predis-async\":\"dev-master\"}\n    }\n\n執行 ``` composer install ``` 來從 Packagist 下載 Predis-Async\n\n    compsoer install\n\n可以開始用 Predis 了，編輯程式檔 notify.php 如下：\n\n    <?php\n    require __DIR__.'/vendor/autoload.php';\n    \n    class LocalStorage\n    {\n        private $product_store = []; // 目前所有 products\n    \n        /**\n         * 使用前更新目前所有 products\n         * @param \\Predis\\Client $client_sync\n         */\n        public function init(\\Predis\\Client $client_sync)\n        {\n            $all_product_keys = $client_sync->keys('product:*');\n            foreach ($all_product_keys as $product_key) {\n                // 抓取 id\n                preg_match('/product:(\\d+)/', $product_key, $matches);\n                $id = $matches[1];\n                // 設定 id=>product 關聯\n                $this->product_store[$id] = $client_sync->hgetall($product_key);\n            }\n            // 排序 product_store\n            ksort($this->product_store);\n        }\n    \n        /**\n         * 判斷 id 是否在 product_store 內\n         * @param $id\n         * @return bool\n         */\n        public function contains($id)\n        {\n            if (isset($this->product_store[$id])) {\n                return true;\n            }\n            return false;\n        }\n    \n    \n        /**\n         * 處理新增事件\n         * @param $id\n         * @param $product\n         */\n        function insertHandler($id, $product)\n        {\n            echo \"新增 product_store 項目:\\n\";\n            echo \"id: $id\\n\";\n            echo \"name: {$product['name']}\\n\";\n            echo \"price: {$product['price']}\\n\";\n            echo \"stock: {$product['stock']}\\n\\n\";\n            $this->product_store[$id] = $product;\n        }\n    \n    \n        /**\n         * 處理更改事件\n         * @param $id\n         * @param $product\n         */\n        function updateHandler($id, $product)\n        {\n            echo \"更改 product_store 項目:\\n\";\n            echo \"id: $id\\n\";\n            if ($this->product_store[$id]['name'] !== $product['name']) {\n                echo \"name: {$product['name']}\\n\";\n                $this->product_store[$id]['name'] = $product['name'];\n            }\n            if ($this->product_store[$id]['price'] !== $product['price']) {\n                echo \"price: {$product['price']}\\n\";\n                $this->product_store[$id]['price'] = $product['price'];\n            }\n            if ($this->product_store[$id]['stock'] !== $product['stock']) {\n                echo \"stock: {$product['stock']}\\n\";\n                $this->product_store[$id]['stock'] = $product['stock'];\n            }\n            echo \"\\n\";\n        }\n    \n        /**\n         * 處理刪除事件\n         * @param $id\n         * @param $product\n         */\n        function deleteHandler($id, $product)\n        {\n            echo \"刪除 product_store 項目:\\n\";\n            echo \"id: $id\\n\\n\";\n            unset($this->product_store[$id]);\n        }\n    \n        /**\n         * 顯示 product_store\n         */\n        function showStore()\n        {\n            foreach ($this->product_store as $id => $product) {\n                echo \"id: $id\\n\";\n                echo \"name: {$product['name']}\\n\";\n                echo \"price: {$product['price']}\\n\";\n                echo \"stock: {$product['stock']}\\n\";\n                echo \"----------------------------------------------\\n\";\n            }\n        }\n    \n    }\n    \n    $client = new Predis\\Async\\Client('tcp://127.0.0.1:6379');\n    $client_sync = new Predis\\Client('tcp://127.0.0.1:6379');\n    \n    $local_storage = new LocalStorage();\n    $local_storage->init($client_sync);\n    $local_storage->showStore();\n    \n    \n    /**\n     * 註冊處理 keyspace 異動的事件，並根據事件的訊息做相應的處理\n     */\n    $client->connect(function ($client) use ($client_sync, $local_storage) {\n        // 使用 psubscribe 訂閱 product:#id 這種樣式的 key 被異動的事件\n        $client->pubSubLoop(['psubscribe'=>'__keyspace@*__:product:*'],\n        function ($event, $pubsub) use ($client_sync, $local_storage) {\n            // 當 product:#id 被異動的時候，根據事件發生的 channel 的名稱取得 key 的名稱和 product 的 id\n            if (preg_match('/__keyspace@\\d+__:(product:(\\d+))/', $event->channel, $matches)) {\n                $product_key = $matches[1];\n                $product_id = $matches[2];\n                // 取得被異動後，最新的 product 資料\n                $product = $client_sync->hgetall($product_key);\n                // 根據事件傳來的訊息得知操作 key 的類型\n                $op = $event->payload;\n                if ($op === 'del') {\n                    $local_storage->deleteHandler($product_id, $product);\n                } else if ($op === 'hset') {\n                    // 當操作類型是 hset 的時候，需要從目前的 product store 去判斷是新增還是修改\n                    if ($local_storage->contains($product_id)) {\n                        $local_storage->updateHandler($product_id, $product);\n                    } else {\n                        $local_storage->insertHandler($product_id,$product);\n                    }\n                }\n            }\n        });\n    });\n    // 開始監聽 keyspace 異動事件\n    $client->getEventLoop()->run();\n\n這個程式維護一個本地的商品清單，並且隨時接收 redis 的最新異動來更新本地清單。\n首先先建立一個 LocalStorage 物件來管理本地商品清單的增刪查改。\n然後使用 Predis Async 來訂閱所有關於 product：* 的異動，\nredis 的 keyspace notification 對要監聽的每個 key 都建立一個 channel\n要訂閱的 channel 樣式如下：\n    \n    __keyspace@*__:product:*\n\n然後當資料異動事件發生的時候，可以取得 channel 的名稱和從 channel 傳遞過來的訊息：\n\n    channel 的名稱： __keyspace@0__:product:1\n    channel 的訊息： hset\n\n因此我們可以從 channel 的名稱取得被異動的 key 的名稱 product:1，當然也可以只取得部份的 key 名稱 1，來作為 id。\n然後可以從 channel 傳遞過來的訊息得知是甚麼操作異動了 key，這裡是 hset。\n關於各種類型的操作會傳遞甚麼訊息可以查看官網的說明 [官網說明文件][1]。\n詳細的程式可以在 [我的 github 上的 demos 專案][5] 下載，放在 redis-notify 資料夾內。\n\n[5]: https://github.com/smjhang/demos\n\n執行程式可以看到以下結果：\n    \n    simon@simon:~/demos/redis-notify$ php notify.php \n    id: 1\n    name: 多力多滋組合包-綜合 54g*4包/組\n    price: 55\n    stock: 256\n    ----------------------------------------------\n    id: 2\n    name: 【洋芋片】Lays樂事瑞士香濃起司 97g/包\n    price: 32\n    stock: 179\n    ----------------------------------------------\n    id: 3\n    name: 【蔓莓纖果】萬歲牌蔓莓纖果150G\n    price: 59\n    stock: 326\n    ----------------------------------------------\n    id: 4\n    name: 【蒜香青豆】盛香珍蒜香青豆 240g/包\n    price: 42\n    stock: 324\n    ----------------------------------------------\n    id: 5\n    name: 【義美】義美小泡芙（檸檬風味）171g/盒\n    price: 64\n    stock: 64\n    ----------------------------------------------\n    id: 6\n    name: 【洋芋片】波的多超厚切洋芋片-蚵仔煎味\n    price: 53\n    stock: 182\n    ----------------------------------------------\n    id: 7\n    name: 【義美】義美小蛋卷（原味）\n    price: 49\n    stock: 313\n    ----------------------------------------------\n    id: 8\n    name: 品客碳烤BBQ口味洋芋片\n    price: 55\n    stock: 158\n    ----------------------------------------------\n\n另外開一個 redis client 來異動資料：\n    \n    simon@simon:~/demos$ redis-cli\n    127.0.0.1:6379> HMSET product:9 name '旺旺 仙貝經濟包' price 469 stock 79\n    OK\n    127.0.0.1:6379> HMSET product:9 name '旺旺 仙貝經濟包' price 469 stock 75\n    OK\n    127.0.0.1:6379> DEL product:9\n    (integer) 1\n    127.0.0.1:6379> \n\n可以在 notify.php 的輸出畫面看到新的訊息：\n\n    新增 product_store 項目:\n    id: 9\n    name: 旺旺 仙貝經濟包\n    price: 469\n    stock: 79\n    \n    更改 product_store 項目:\n    id: 9\n    stock: 75\n    \n    刪除 product_store 項目:\n    id: 9\n\n\n# 結論\n這邊介紹 redis 如何實現資料異動通知的功能。不過要注意的是 redis 不會保存通知過的訊息，因此如果對 redis 的連線斷線的話，斷線的應用程式是無法再取得斷線期間的異動通知。\n如果非常在意事件一定要通知到的話，要自己想辦法把事件保留起來，官網上說未來 redis 可能會將這些通知保留再另外的 SET 內，不過現階段還沒有，可能要自己實作保存事件的部份。","source":"_posts/redis-notification.md","raw":"---\ntitle: Redis Notification\ndate: 2016-07-27 22:49:42\ntags: \n- redis\n\n---\n# 簡介\n在實現事件驅動設計的過程中，能夠讓資料庫在異動資料時自動發出通知是一個重要的環節，如此一來就不需要有另外一支程式不斷去查詢資料庫的異動，可以節省系統資源。\n本篇探討將使用 redis 的 keyspace notification 功能來實現資料異動的即時通知，並且以 PHP 程式來實作。\n本篇將會以一個線上購物網站的物品庫存清單為例，展示如何實作即時顯示當前貨品庫存量的功能。\n\n# redis 資料結構規劃\n商品的資料儲存在 product:#id 的 hash，\n並建立一個 set 用來維護商品清單。\n\n|data type | key          | description  |\n|----------|--------------|------------  |\n|set       | product_ids  | 商品總類清單   |\n|hash      | product:#id  | 商品細節      |\n<caption>表1: 資料結構規劃</caption>\n\n<caption>建立 redis 資料</capion>\n\n    HMSET product:1 name \"多力多滋組合包-綜合 54g*4包/組\" price 55 stock 256\n    HMSET product:2 name \"【洋芋片】Lays樂事瑞士香濃起司 97g/包\" price 32 stock 179\n    HMSET product:3 name \"【蔓莓纖果】萬歲牌蔓莓纖果150G\"  price 59 stock 326\n    HMSET product:4 name \"【蒜香青豆】盛香珍蒜香青豆 240g/包\" price 42 stock 324\n    HMSET product:5 name \"【義美】義美小泡芙（檸檬風味）171g/盒\" price 64 stock 64\n    HMSET product:6 name \"【洋芋片】波的多超厚切洋芋片-蚵仔煎味\" price 53 stock 182\n    HMSET product:7 name \"【義美】義美小蛋卷（原味）\" price 49 stock 313\n    HMSET product:8 name \"品客碳烤BBQ口味洋芋片\" price 55 stock 158\n    SADD products 1\n    SADD products 2\n    SADD products 3\n    SADD products 4\n    SADD products 5\n    SADD products 6\n    SADD products 7\n    SADD products 8\n\n# redis keyspace notification \n為了讓物品庫存數量能即時反應到應用程式，必須讓資料庫將資料的異動反應給應用程式，\n這邊說明如何使用 redis 的 keyspace notification 功能來實現異動事件通知。\n至於更詳細的說明可以看 [官網說明文件][1]。\n[1]: http://redis.io/topics/notifications  \"Redis Keyspace Notifications\"\n\nkeyspace notification 可讓應用程式訂閱 keyspace 更動的事件，\n當 redis 的資料有異動的時候有兩種類型的事件會被觸發：\n1. 第一種讓我們可以監聽某個 key 是否被異動，當它被異動的時候，我們可以得知異動這個 key 的命令類型，稱為 keyspace 事件。\n2. 第二種讓我們可以監聽是否有某個命令類型被執行，當它被執行時，透過這個事件，我們可以得知被這個命令影響到的 key，稱為 keyevent 事件。\n\nRedis 的事件通知是透過 PUB/SUB 來進行的，因此再使用前需先了解 Redis PUB/SUB 是如何進行的。\n可以參考官網的文件 [Redis PUB/SUB][2]。簡單來說就是一個客戶端訂閱了某個 channel, 另外一個客戶端可以發佈訊息到這個 channel, \n然後前面那個訂閱的客戶端就可以收到第二個客戶端發送過來的訊息了。在 Redis keyspace notification 的應用中，Redis 會負責發佈訊息到指定的 channel, 我們只要接收這些訊息就可以了。\n後面會討論這些 channel。\n\n[2]: http://redis.io/topics/pubsub \"Redis PUB/SUB\"\n\n在使用 keyspace notification 前，需要先打開這個功能，編輯 redis.conf 將 notify-keyspace-events 設成：\n    \n    notify-keyspace-events \"KEA\"\n    \n根據官網的說明，\nK - Keyspace events\nE - Keyevent event\nA - All commands\nKEA 代表要訂閱所有命令類型的第一種和第二種事件。\n更改設定檔要重啟 redis 後才會生效。\n\nredis 的事件通知是透過 PUB/SUB 來進行的，因此當上述兩種事件發生的時候，redis 會分別發佈訊息到以下兩種 channel 上：\n    1. PUBLISH __keyspace@<db id>__:<key name> <command type>\n    2. PUBLISH __keyevent@<db id>__:<command type> <key name> \n\n我們可以透過 PSUBSCRIBE 來訂閱這些事件：\n    1. PSUBSCRIBE __keyspace@*__:*\n    2. PSUBSCRIBE __keyevent@*__:*\n\n假設我們要觀察 del test1 test2 test3 test4 指令對 keyspace 和 keyevent 的影響可以分別訂閱以下兩個 channel\n\n    127.0.0.1:6379> PSUBSCRIBE __keyspace@*__:test*\n    Reading messages... (press Ctrl-C to quit)\n    1) \"psubscribe\"\n    2) \"__keyspace@*__:test*\"\n    3) (integer) 1\n    \n    127.0.0.1:6379> PSUBSCRIBE __keyevent@*__:del\n    Reading messages... (press Ctrl-C to quit)\n    1) \"psubscribe\"\n    2) \"__keyevent@*__:del\"\n    3) (integer) 1\n    \n設定要處理的 key\n    \n    127.0.0.1:6379> set test1 test1\n    OK\n    127.0.0.1:6379> set test2 test2\n    OK\n    127.0.0.1:6379> set test3 test3\n    OK\n    127.0.0.1:6379> set test4 test4\n    \n注意我這邊開了三個 terminal，分別執行三個 redis-cli，一個監聽對 test* 的異動，一個監聽 del 操作是否被執行，最後一個負責下各種指令。 \n\n在建立過程中，可以看到對 keyspace 的監聽訊息如下：\n\n    127.0.0.1:6379> PSUBSCRIBE __keyspace@*__:test*\n    Reading messages... (press Ctrl-C to quit)\n    1) \"psubscribe\"\n    2) \"__keyspace@*__:test*\"\n    3) (integer) 1\n    1) \"pmessage\"\n    2) \"__keyspace@*__:test*\"\n    3) \"__keyspace@0__:test1\"\n    4) \"set\"\n    1) \"pmessage\"\n    2) \"__keyspace@*__:test*\"\n    3) \"__keyspace@0__:test2\"\n    4) \"set\"\n    1) \"pmessage\"\n    2) \"__keyspace@*__:test*\"\n    3) \"__keyspace@0__:test3\"\n    4) \"set\"\n    1) \"pmessage\"\n    2) \"__keyspace@*__:test*\"\n    3) \"__keyspace@0__:test4\"\n    4) \"set\"\n\n注意 ```127.0.0.1:6379> PSUBSCRIBE __keyevent@*__:del``` 那個 redis-cli 沒有任何更新，因為沒有任何 del 操作被執行。\n現在刪除 test, tests, test3, test4：\n\n    127.0.0.1:6379> del test1 test2 test3 test4\n    (integer) 4\n\n可以看到對 keyspace (```127.0.0.1:6379> PSUBSCRIBE __keyspace@*__:test*```) 的監聽如下：\n    \n    1) \"pmessage\"\n    2) \"__keyspace@*__:test*\"\n    3) \"__keyspace@0__:test1\"\n    4) \"del\"\n    1) \"pmessage\"\n    2) \"__keyspace@*__:test*\"\n    3) \"__keyspace@0__:test2\"\n    4) \"del\"\n    1) \"pmessage\"\n    2) \"__keyspace@*__:test*\"\n    3) \"__keyspace@0__:test3\"\n    4) \"del\"\n    1) \"pmessage\"\n    2) \"__keyspace@*__:test*\"\n    3) \"__keyspace@0__:test4\"\n    4) \"del\"\n\n對 keyevent (```127.0.0.1:6379> PSUBSCRIBE __keyevent@*__:del```)的監聽如下：\n    \n    1) \"pmessage\"\n    2) \"__keyevent@*__:del\"\n    3) \"__keyevent@0__:del\"\n    4) \"test1\"\n    1) \"pmessage\"\n    2) \"__keyevent@*__:del\"\n    3) \"__keyevent@0__:del\"\n    4) \"test2\"\n    1) \"pmessage\"\n    2) \"__keyevent@*__:del\"\n    3) \"__keyevent@0__:del\"\n    4) \"test3\"\n    1) \"pmessage\"\n    2) \"__keyevent@*__:del\"\n    3) \"__keyevent@0__:del\"\n    4) \"test4\"\n\n從上面的結果我們可以知道一個命令對多個 key 的操作，是會引發多次 keyspace 事件和 keyevent 事件的。\n然後我們透過這些事件只能知道是甚麼 key 被影響、被甚麼指令影響，而不知道 key 被異動後的資料，如果想要知道 key 的最新資料則要自己再去讀取那個 key。\n\n# 使用 Predis 在 PHP 中操作 redis\n\n建立一個 redis-notify 專案\n    \n    mkdir redis-notofy\n\n我們這邊使用 composer 來取得 Predis Async, 使用非同步版本的 Predis 比較適合這種監聽事件的任務。\n關於 composer 的使用可以參考 [composer 官網說明文件][3]。\n關於 Predis Async 的介紹可以參考 [Predis Async][4]。\n[3]: https://getcomposer.org/  \"Composer\"\n[4]: https://packagist.org/packages/predis/predis\n在該專案內建立 composer.json 如下：\n\n    {\n      \"require\":{\"predis/predis-async\":\"dev-master\"}\n    }\n\n執行 ``` composer install ``` 來從 Packagist 下載 Predis-Async\n\n    compsoer install\n\n可以開始用 Predis 了，編輯程式檔 notify.php 如下：\n\n    <?php\n    require __DIR__.'/vendor/autoload.php';\n    \n    class LocalStorage\n    {\n        private $product_store = []; // 目前所有 products\n    \n        /**\n         * 使用前更新目前所有 products\n         * @param \\Predis\\Client $client_sync\n         */\n        public function init(\\Predis\\Client $client_sync)\n        {\n            $all_product_keys = $client_sync->keys('product:*');\n            foreach ($all_product_keys as $product_key) {\n                // 抓取 id\n                preg_match('/product:(\\d+)/', $product_key, $matches);\n                $id = $matches[1];\n                // 設定 id=>product 關聯\n                $this->product_store[$id] = $client_sync->hgetall($product_key);\n            }\n            // 排序 product_store\n            ksort($this->product_store);\n        }\n    \n        /**\n         * 判斷 id 是否在 product_store 內\n         * @param $id\n         * @return bool\n         */\n        public function contains($id)\n        {\n            if (isset($this->product_store[$id])) {\n                return true;\n            }\n            return false;\n        }\n    \n    \n        /**\n         * 處理新增事件\n         * @param $id\n         * @param $product\n         */\n        function insertHandler($id, $product)\n        {\n            echo \"新增 product_store 項目:\\n\";\n            echo \"id: $id\\n\";\n            echo \"name: {$product['name']}\\n\";\n            echo \"price: {$product['price']}\\n\";\n            echo \"stock: {$product['stock']}\\n\\n\";\n            $this->product_store[$id] = $product;\n        }\n    \n    \n        /**\n         * 處理更改事件\n         * @param $id\n         * @param $product\n         */\n        function updateHandler($id, $product)\n        {\n            echo \"更改 product_store 項目:\\n\";\n            echo \"id: $id\\n\";\n            if ($this->product_store[$id]['name'] !== $product['name']) {\n                echo \"name: {$product['name']}\\n\";\n                $this->product_store[$id]['name'] = $product['name'];\n            }\n            if ($this->product_store[$id]['price'] !== $product['price']) {\n                echo \"price: {$product['price']}\\n\";\n                $this->product_store[$id]['price'] = $product['price'];\n            }\n            if ($this->product_store[$id]['stock'] !== $product['stock']) {\n                echo \"stock: {$product['stock']}\\n\";\n                $this->product_store[$id]['stock'] = $product['stock'];\n            }\n            echo \"\\n\";\n        }\n    \n        /**\n         * 處理刪除事件\n         * @param $id\n         * @param $product\n         */\n        function deleteHandler($id, $product)\n        {\n            echo \"刪除 product_store 項目:\\n\";\n            echo \"id: $id\\n\\n\";\n            unset($this->product_store[$id]);\n        }\n    \n        /**\n         * 顯示 product_store\n         */\n        function showStore()\n        {\n            foreach ($this->product_store as $id => $product) {\n                echo \"id: $id\\n\";\n                echo \"name: {$product['name']}\\n\";\n                echo \"price: {$product['price']}\\n\";\n                echo \"stock: {$product['stock']}\\n\";\n                echo \"----------------------------------------------\\n\";\n            }\n        }\n    \n    }\n    \n    $client = new Predis\\Async\\Client('tcp://127.0.0.1:6379');\n    $client_sync = new Predis\\Client('tcp://127.0.0.1:6379');\n    \n    $local_storage = new LocalStorage();\n    $local_storage->init($client_sync);\n    $local_storage->showStore();\n    \n    \n    /**\n     * 註冊處理 keyspace 異動的事件，並根據事件的訊息做相應的處理\n     */\n    $client->connect(function ($client) use ($client_sync, $local_storage) {\n        // 使用 psubscribe 訂閱 product:#id 這種樣式的 key 被異動的事件\n        $client->pubSubLoop(['psubscribe'=>'__keyspace@*__:product:*'],\n        function ($event, $pubsub) use ($client_sync, $local_storage) {\n            // 當 product:#id 被異動的時候，根據事件發生的 channel 的名稱取得 key 的名稱和 product 的 id\n            if (preg_match('/__keyspace@\\d+__:(product:(\\d+))/', $event->channel, $matches)) {\n                $product_key = $matches[1];\n                $product_id = $matches[2];\n                // 取得被異動後，最新的 product 資料\n                $product = $client_sync->hgetall($product_key);\n                // 根據事件傳來的訊息得知操作 key 的類型\n                $op = $event->payload;\n                if ($op === 'del') {\n                    $local_storage->deleteHandler($product_id, $product);\n                } else if ($op === 'hset') {\n                    // 當操作類型是 hset 的時候，需要從目前的 product store 去判斷是新增還是修改\n                    if ($local_storage->contains($product_id)) {\n                        $local_storage->updateHandler($product_id, $product);\n                    } else {\n                        $local_storage->insertHandler($product_id,$product);\n                    }\n                }\n            }\n        });\n    });\n    // 開始監聽 keyspace 異動事件\n    $client->getEventLoop()->run();\n\n這個程式維護一個本地的商品清單，並且隨時接收 redis 的最新異動來更新本地清單。\n首先先建立一個 LocalStorage 物件來管理本地商品清單的增刪查改。\n然後使用 Predis Async 來訂閱所有關於 product：* 的異動，\nredis 的 keyspace notification 對要監聽的每個 key 都建立一個 channel\n要訂閱的 channel 樣式如下：\n    \n    __keyspace@*__:product:*\n\n然後當資料異動事件發生的時候，可以取得 channel 的名稱和從 channel 傳遞過來的訊息：\n\n    channel 的名稱： __keyspace@0__:product:1\n    channel 的訊息： hset\n\n因此我們可以從 channel 的名稱取得被異動的 key 的名稱 product:1，當然也可以只取得部份的 key 名稱 1，來作為 id。\n然後可以從 channel 傳遞過來的訊息得知是甚麼操作異動了 key，這裡是 hset。\n關於各種類型的操作會傳遞甚麼訊息可以查看官網的說明 [官網說明文件][1]。\n詳細的程式可以在 [我的 github 上的 demos 專案][5] 下載，放在 redis-notify 資料夾內。\n\n[5]: https://github.com/smjhang/demos\n\n執行程式可以看到以下結果：\n    \n    simon@simon:~/demos/redis-notify$ php notify.php \n    id: 1\n    name: 多力多滋組合包-綜合 54g*4包/組\n    price: 55\n    stock: 256\n    ----------------------------------------------\n    id: 2\n    name: 【洋芋片】Lays樂事瑞士香濃起司 97g/包\n    price: 32\n    stock: 179\n    ----------------------------------------------\n    id: 3\n    name: 【蔓莓纖果】萬歲牌蔓莓纖果150G\n    price: 59\n    stock: 326\n    ----------------------------------------------\n    id: 4\n    name: 【蒜香青豆】盛香珍蒜香青豆 240g/包\n    price: 42\n    stock: 324\n    ----------------------------------------------\n    id: 5\n    name: 【義美】義美小泡芙（檸檬風味）171g/盒\n    price: 64\n    stock: 64\n    ----------------------------------------------\n    id: 6\n    name: 【洋芋片】波的多超厚切洋芋片-蚵仔煎味\n    price: 53\n    stock: 182\n    ----------------------------------------------\n    id: 7\n    name: 【義美】義美小蛋卷（原味）\n    price: 49\n    stock: 313\n    ----------------------------------------------\n    id: 8\n    name: 品客碳烤BBQ口味洋芋片\n    price: 55\n    stock: 158\n    ----------------------------------------------\n\n另外開一個 redis client 來異動資料：\n    \n    simon@simon:~/demos$ redis-cli\n    127.0.0.1:6379> HMSET product:9 name '旺旺 仙貝經濟包' price 469 stock 79\n    OK\n    127.0.0.1:6379> HMSET product:9 name '旺旺 仙貝經濟包' price 469 stock 75\n    OK\n    127.0.0.1:6379> DEL product:9\n    (integer) 1\n    127.0.0.1:6379> \n\n可以在 notify.php 的輸出畫面看到新的訊息：\n\n    新增 product_store 項目:\n    id: 9\n    name: 旺旺 仙貝經濟包\n    price: 469\n    stock: 79\n    \n    更改 product_store 項目:\n    id: 9\n    stock: 75\n    \n    刪除 product_store 項目:\n    id: 9\n\n\n# 結論\n這邊介紹 redis 如何實現資料異動通知的功能。不過要注意的是 redis 不會保存通知過的訊息，因此如果對 redis 的連線斷線的話，斷線的應用程式是無法再取得斷線期間的異動通知。\n如果非常在意事件一定要通知到的話，要自己想辦法把事件保留起來，官網上說未來 redis 可能會將這些通知保留再另外的 SET 內，不過現階段還沒有，可能要自己實作保存事件的部份。","slug":"redis-notification","published":1,"updated":"2016-08-03T19:06:30.933Z","_id":"cirf9ei8w00004kgfnlvrnlzk","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h1><p>在實現事件驅動設計的過程中，能夠讓資料庫在異動資料時自動發出通知是一個重要的環節，如此一來就不需要有另外一支程式不斷去查詢資料庫的異動，可以節省系統資源。<br>本篇探討將使用 redis 的 keyspace notification 功能來實現資料異動的即時通知，並且以 PHP 程式來實作。<br>本篇將會以一個線上購物網站的物品庫存清單為例，展示如何實作即時顯示當前貨品庫存量的功能。</p>\n<h1 id=\"redis-資料結構規劃\"><a href=\"#redis-資料結構規劃\" class=\"headerlink\" title=\"redis 資料結構規劃\"></a>redis 資料結構規劃</h1><p>商品的資料儲存在 product:#id 的 hash，<br>並建立一個 set 用來維護商品清單。</p>\n<table>\n<thead>\n<tr>\n<th>data type</th>\n<th>key</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>set</td>\n<td>product_ids</td>\n<td>商品總類清單</td>\n</tr>\n<tr>\n<td>hash</td>\n<td>product:#id</td>\n<td>商品細節</td>\n</tr>\n</tbody>\n</table>\n<caption>表1: 資料結構規劃</caption>\n\n<p><caption>建立 redis 資料</caption></p>\n<pre><code>HMSET product:1 name &quot;多力多滋組合包-綜合 54g*4包/組&quot; price 55 stock 256\nHMSET product:2 name &quot;【洋芋片】Lays樂事瑞士香濃起司 97g/包&quot; price 32 stock 179\nHMSET product:3 name &quot;【蔓莓纖果】萬歲牌蔓莓纖果150G&quot;  price 59 stock 326\nHMSET product:4 name &quot;【蒜香青豆】盛香珍蒜香青豆 240g/包&quot; price 42 stock 324\nHMSET product:5 name &quot;【義美】義美小泡芙（檸檬風味）171g/盒&quot; price 64 stock 64\nHMSET product:6 name &quot;【洋芋片】波的多超厚切洋芋片-蚵仔煎味&quot; price 53 stock 182\nHMSET product:7 name &quot;【義美】義美小蛋卷（原味）&quot; price 49 stock 313\nHMSET product:8 name &quot;品客碳烤BBQ口味洋芋片&quot; price 55 stock 158\nSADD products 1\nSADD products 2\nSADD products 3\nSADD products 4\nSADD products 5\nSADD products 6\nSADD products 7\nSADD products 8\n</code></pre><h1 id=\"redis-keyspace-notification\"><a href=\"#redis-keyspace-notification\" class=\"headerlink\" title=\"redis keyspace notification\"></a>redis keyspace notification</h1><p>為了讓物品庫存數量能即時反應到應用程式，必須讓資料庫將資料的異動反應給應用程式，<br>這邊說明如何使用 redis 的 keyspace notification 功能來實現異動事件通知。<br>至於更詳細的說明可以看 <a href=\"http://redis.io/topics/notifications\" title=\"Redis Keyspace Notifications\" target=\"_blank\" rel=\"external\">官網說明文件</a>。</p>\n<p>keyspace notification 可讓應用程式訂閱 keyspace 更動的事件，<br>當 redis 的資料有異動的時候有兩種類型的事件會被觸發：</p>\n<ol>\n<li>第一種讓我們可以監聽某個 key 是否被異動，當它被異動的時候，我們可以得知異動這個 key 的命令類型，稱為 keyspace 事件。</li>\n<li>第二種讓我們可以監聽是否有某個命令類型被執行，當它被執行時，透過這個事件，我們可以得知被這個命令影響到的 key，稱為 keyevent 事件。</li>\n</ol>\n<p>Redis 的事件通知是透過 PUB/SUB 來進行的，因此再使用前需先了解 Redis PUB/SUB 是如何進行的。<br>可以參考官網的文件 <a href=\"http://redis.io/topics/pubsub\" title=\"Redis PUB/SUB\" target=\"_blank\" rel=\"external\">Redis PUB/SUB</a>。簡單來說就是一個客戶端訂閱了某個 channel, 另外一個客戶端可以發佈訊息到這個 channel,<br>然後前面那個訂閱的客戶端就可以收到第二個客戶端發送過來的訊息了。在 Redis keyspace notification 的應用中，Redis 會負責發佈訊息到指定的 channel, 我們只要接收這些訊息就可以了。<br>後面會討論這些 channel。</p>\n<p>在使用 keyspace notification 前，需要先打開這個功能，編輯 redis.conf 將 notify-keyspace-events 設成：</p>\n<pre><code>notify-keyspace-events &quot;KEA&quot;\n</code></pre><p>根據官網的說明，<br>K - Keyspace events<br>E - Keyevent event<br>A - All commands<br>KEA 代表要訂閱所有命令類型的第一種和第二種事件。<br>更改設定檔要重啟 redis 後才會生效。</p>\n<p>redis 的事件通知是透過 PUB/SUB 來進行的，因此當上述兩種事件發生的時候，redis 會分別發佈訊息到以下兩種 channel 上：</p>\n<pre><code>1. PUBLISH __keyspace@&lt;db id&gt;__:&lt;key name&gt; &lt;command type&gt;\n2. PUBLISH __keyevent@&lt;db id&gt;__:&lt;command type&gt; &lt;key name&gt; \n</code></pre><p>我們可以透過 PSUBSCRIBE 來訂閱這些事件：</p>\n<pre><code>1. PSUBSCRIBE __keyspace@*__:*\n2. PSUBSCRIBE __keyevent@*__:*\n</code></pre><p>假設我們要觀察 del test1 test2 test3 test4 指令對 keyspace 和 keyevent 的影響可以分別訂閱以下兩個 channel</p>\n<pre><code>127.0.0.1:6379&gt; PSUBSCRIBE __keyspace@*__:test*\nReading messages... (press Ctrl-C to quit)\n1) &quot;psubscribe&quot;\n2) &quot;__keyspace@*__:test*&quot;\n3) (integer) 1\n\n127.0.0.1:6379&gt; PSUBSCRIBE __keyevent@*__:del\nReading messages... (press Ctrl-C to quit)\n1) &quot;psubscribe&quot;\n2) &quot;__keyevent@*__:del&quot;\n3) (integer) 1\n</code></pre><p>設定要處理的 key</p>\n<pre><code>127.0.0.1:6379&gt; set test1 test1\nOK\n127.0.0.1:6379&gt; set test2 test2\nOK\n127.0.0.1:6379&gt; set test3 test3\nOK\n127.0.0.1:6379&gt; set test4 test4\n</code></pre><p>注意我這邊開了三個 terminal，分別執行三個 redis-cli，一個監聽對 test* 的異動，一個監聽 del 操作是否被執行，最後一個負責下各種指令。 </p>\n<p>在建立過程中，可以看到對 keyspace 的監聽訊息如下：</p>\n<pre><code>127.0.0.1:6379&gt; PSUBSCRIBE __keyspace@*__:test*\nReading messages... (press Ctrl-C to quit)\n1) &quot;psubscribe&quot;\n2) &quot;__keyspace@*__:test*&quot;\n3) (integer) 1\n1) &quot;pmessage&quot;\n2) &quot;__keyspace@*__:test*&quot;\n3) &quot;__keyspace@0__:test1&quot;\n4) &quot;set&quot;\n1) &quot;pmessage&quot;\n2) &quot;__keyspace@*__:test*&quot;\n3) &quot;__keyspace@0__:test2&quot;\n4) &quot;set&quot;\n1) &quot;pmessage&quot;\n2) &quot;__keyspace@*__:test*&quot;\n3) &quot;__keyspace@0__:test3&quot;\n4) &quot;set&quot;\n1) &quot;pmessage&quot;\n2) &quot;__keyspace@*__:test*&quot;\n3) &quot;__keyspace@0__:test4&quot;\n4) &quot;set&quot;\n</code></pre><p>注意 <code>127.0.0.1:6379&gt; PSUBSCRIBE __keyevent@*__:del</code> 那個 redis-cli 沒有任何更新，因為沒有任何 del 操作被執行。<br>現在刪除 test, tests, test3, test4：</p>\n<pre><code>127.0.0.1:6379&gt; del test1 test2 test3 test4\n(integer) 4\n</code></pre><p>可以看到對 keyspace (<code>127.0.0.1:6379&gt; PSUBSCRIBE __keyspace@*__:test*</code>) 的監聽如下：</p>\n<pre><code>1) &quot;pmessage&quot;\n2) &quot;__keyspace@*__:test*&quot;\n3) &quot;__keyspace@0__:test1&quot;\n4) &quot;del&quot;\n1) &quot;pmessage&quot;\n2) &quot;__keyspace@*__:test*&quot;\n3) &quot;__keyspace@0__:test2&quot;\n4) &quot;del&quot;\n1) &quot;pmessage&quot;\n2) &quot;__keyspace@*__:test*&quot;\n3) &quot;__keyspace@0__:test3&quot;\n4) &quot;del&quot;\n1) &quot;pmessage&quot;\n2) &quot;__keyspace@*__:test*&quot;\n3) &quot;__keyspace@0__:test4&quot;\n4) &quot;del&quot;\n</code></pre><p>對 keyevent (<code>127.0.0.1:6379&gt; PSUBSCRIBE __keyevent@*__:del</code>)的監聽如下：</p>\n<pre><code>1) &quot;pmessage&quot;\n2) &quot;__keyevent@*__:del&quot;\n3) &quot;__keyevent@0__:del&quot;\n4) &quot;test1&quot;\n1) &quot;pmessage&quot;\n2) &quot;__keyevent@*__:del&quot;\n3) &quot;__keyevent@0__:del&quot;\n4) &quot;test2&quot;\n1) &quot;pmessage&quot;\n2) &quot;__keyevent@*__:del&quot;\n3) &quot;__keyevent@0__:del&quot;\n4) &quot;test3&quot;\n1) &quot;pmessage&quot;\n2) &quot;__keyevent@*__:del&quot;\n3) &quot;__keyevent@0__:del&quot;\n4) &quot;test4&quot;\n</code></pre><p>從上面的結果我們可以知道一個命令對多個 key 的操作，是會引發多次 keyspace 事件和 keyevent 事件的。<br>然後我們透過這些事件只能知道是甚麼 key 被影響、被甚麼指令影響，而不知道 key 被異動後的資料，如果想要知道 key 的最新資料則要自己再去讀取那個 key。</p>\n<h1 id=\"使用-Predis-在-PHP-中操作-redis\"><a href=\"#使用-Predis-在-PHP-中操作-redis\" class=\"headerlink\" title=\"使用 Predis 在 PHP 中操作 redis\"></a>使用 Predis 在 PHP 中操作 redis</h1><p>建立一個 redis-notify 專案</p>\n<pre><code>mkdir redis-notofy\n</code></pre><p>我們這邊使用 composer 來取得 Predis Async, 使用非同步版本的 Predis 比較適合這種監聽事件的任務。<br>關於 composer 的使用可以參考 <a href=\"https://getcomposer.org/\" title=\"Composer\" target=\"_blank\" rel=\"external\">composer 官網說明文件</a>。<br>關於 Predis Async 的介紹可以參考 <a href=\"https://packagist.org/packages/predis/predis\" target=\"_blank\" rel=\"external\">Predis Async</a>。</p>\n<p>在該專案內建立 composer.json 如下：</p>\n<pre><code>{\n  &quot;require&quot;:{&quot;predis/predis-async&quot;:&quot;dev-master&quot;}\n}\n</code></pre><p>執行 <code>composer install</code> 來從 Packagist 下載 Predis-Async</p>\n<pre><code>compsoer install\n</code></pre><p>可以開始用 Predis 了，編輯程式檔 notify.php 如下：</p>\n<pre><code>&lt;?php\nrequire __DIR__.&apos;/vendor/autoload.php&apos;;\n\nclass LocalStorage\n{\n    private $product_store = []; // 目前所有 products\n\n    /**\n     * 使用前更新目前所有 products\n     * @param \\Predis\\Client $client_sync\n     */\n    public function init(\\Predis\\Client $client_sync)\n    {\n        $all_product_keys = $client_sync-&gt;keys(&apos;product:*&apos;);\n        foreach ($all_product_keys as $product_key) {\n            // 抓取 id\n            preg_match(&apos;/product:(\\d+)/&apos;, $product_key, $matches);\n            $id = $matches[1];\n            // 設定 id=&gt;product 關聯\n            $this-&gt;product_store[$id] = $client_sync-&gt;hgetall($product_key);\n        }\n        // 排序 product_store\n        ksort($this-&gt;product_store);\n    }\n\n    /**\n     * 判斷 id 是否在 product_store 內\n     * @param $id\n     * @return bool\n     */\n    public function contains($id)\n    {\n        if (isset($this-&gt;product_store[$id])) {\n            return true;\n        }\n        return false;\n    }\n\n\n    /**\n     * 處理新增事件\n     * @param $id\n     * @param $product\n     */\n    function insertHandler($id, $product)\n    {\n        echo &quot;新增 product_store 項目:\\n&quot;;\n        echo &quot;id: $id\\n&quot;;\n        echo &quot;name: {$product[&apos;name&apos;]}\\n&quot;;\n        echo &quot;price: {$product[&apos;price&apos;]}\\n&quot;;\n        echo &quot;stock: {$product[&apos;stock&apos;]}\\n\\n&quot;;\n        $this-&gt;product_store[$id] = $product;\n    }\n\n\n    /**\n     * 處理更改事件\n     * @param $id\n     * @param $product\n     */\n    function updateHandler($id, $product)\n    {\n        echo &quot;更改 product_store 項目:\\n&quot;;\n        echo &quot;id: $id\\n&quot;;\n        if ($this-&gt;product_store[$id][&apos;name&apos;] !== $product[&apos;name&apos;]) {\n            echo &quot;name: {$product[&apos;name&apos;]}\\n&quot;;\n            $this-&gt;product_store[$id][&apos;name&apos;] = $product[&apos;name&apos;];\n        }\n        if ($this-&gt;product_store[$id][&apos;price&apos;] !== $product[&apos;price&apos;]) {\n            echo &quot;price: {$product[&apos;price&apos;]}\\n&quot;;\n            $this-&gt;product_store[$id][&apos;price&apos;] = $product[&apos;price&apos;];\n        }\n        if ($this-&gt;product_store[$id][&apos;stock&apos;] !== $product[&apos;stock&apos;]) {\n            echo &quot;stock: {$product[&apos;stock&apos;]}\\n&quot;;\n            $this-&gt;product_store[$id][&apos;stock&apos;] = $product[&apos;stock&apos;];\n        }\n        echo &quot;\\n&quot;;\n    }\n\n    /**\n     * 處理刪除事件\n     * @param $id\n     * @param $product\n     */\n    function deleteHandler($id, $product)\n    {\n        echo &quot;刪除 product_store 項目:\\n&quot;;\n        echo &quot;id: $id\\n\\n&quot;;\n        unset($this-&gt;product_store[$id]);\n    }\n\n    /**\n     * 顯示 product_store\n     */\n    function showStore()\n    {\n        foreach ($this-&gt;product_store as $id =&gt; $product) {\n            echo &quot;id: $id\\n&quot;;\n            echo &quot;name: {$product[&apos;name&apos;]}\\n&quot;;\n            echo &quot;price: {$product[&apos;price&apos;]}\\n&quot;;\n            echo &quot;stock: {$product[&apos;stock&apos;]}\\n&quot;;\n            echo &quot;----------------------------------------------\\n&quot;;\n        }\n    }\n\n}\n\n$client = new Predis\\Async\\Client(&apos;tcp://127.0.0.1:6379&apos;);\n$client_sync = new Predis\\Client(&apos;tcp://127.0.0.1:6379&apos;);\n\n$local_storage = new LocalStorage();\n$local_storage-&gt;init($client_sync);\n$local_storage-&gt;showStore();\n\n\n/**\n * 註冊處理 keyspace 異動的事件，並根據事件的訊息做相應的處理\n */\n$client-&gt;connect(function ($client) use ($client_sync, $local_storage) {\n    // 使用 psubscribe 訂閱 product:#id 這種樣式的 key 被異動的事件\n    $client-&gt;pubSubLoop([&apos;psubscribe&apos;=&gt;&apos;__keyspace@*__:product:*&apos;],\n    function ($event, $pubsub) use ($client_sync, $local_storage) {\n        // 當 product:#id 被異動的時候，根據事件發生的 channel 的名稱取得 key 的名稱和 product 的 id\n        if (preg_match(&apos;/__keyspace@\\d+__:(product:(\\d+))/&apos;, $event-&gt;channel, $matches)) {\n            $product_key = $matches[1];\n            $product_id = $matches[2];\n            // 取得被異動後，最新的 product 資料\n            $product = $client_sync-&gt;hgetall($product_key);\n            // 根據事件傳來的訊息得知操作 key 的類型\n            $op = $event-&gt;payload;\n            if ($op === &apos;del&apos;) {\n                $local_storage-&gt;deleteHandler($product_id, $product);\n            } else if ($op === &apos;hset&apos;) {\n                // 當操作類型是 hset 的時候，需要從目前的 product store 去判斷是新增還是修改\n                if ($local_storage-&gt;contains($product_id)) {\n                    $local_storage-&gt;updateHandler($product_id, $product);\n                } else {\n                    $local_storage-&gt;insertHandler($product_id,$product);\n                }\n            }\n        }\n    });\n});\n// 開始監聽 keyspace 異動事件\n$client-&gt;getEventLoop()-&gt;run();\n</code></pre><p>這個程式維護一個本地的商品清單，並且隨時接收 redis 的最新異動來更新本地清單。<br>首先先建立一個 LocalStorage 物件來管理本地商品清單的增刪查改。<br>然後使用 Predis Async 來訂閱所有關於 product：* 的異動，<br>redis 的 keyspace notification 對要監聽的每個 key 都建立一個 channel<br>要訂閱的 channel 樣式如下：</p>\n<pre><code>__keyspace@*__:product:*\n</code></pre><p>然後當資料異動事件發生的時候，可以取得 channel 的名稱和從 channel 傳遞過來的訊息：</p>\n<pre><code>channel 的名稱： __keyspace@0__:product:1\nchannel 的訊息： hset\n</code></pre><p>因此我們可以從 channel 的名稱取得被異動的 key 的名稱 product:1，當然也可以只取得部份的 key 名稱 1，來作為 id。<br>然後可以從 channel 傳遞過來的訊息得知是甚麼操作異動了 key，這裡是 hset。<br>關於各種類型的操作會傳遞甚麼訊息可以查看官網的說明 <a href=\"http://redis.io/topics/notifications\" title=\"Redis Keyspace Notifications\" target=\"_blank\" rel=\"external\">官網說明文件</a>。<br>詳細的程式可以在 <a href=\"https://github.com/smjhang/demos\" target=\"_blank\" rel=\"external\">我的 github 上的 demos 專案</a> 下載，放在 redis-notify 資料夾內。</p>\n<p>執行程式可以看到以下結果：</p>\n<pre><code>simon@simon:~/demos/redis-notify$ php notify.php \nid: 1\nname: 多力多滋組合包-綜合 54g*4包/組\nprice: 55\nstock: 256\n----------------------------------------------\nid: 2\nname: 【洋芋片】Lays樂事瑞士香濃起司 97g/包\nprice: 32\nstock: 179\n----------------------------------------------\nid: 3\nname: 【蔓莓纖果】萬歲牌蔓莓纖果150G\nprice: 59\nstock: 326\n----------------------------------------------\nid: 4\nname: 【蒜香青豆】盛香珍蒜香青豆 240g/包\nprice: 42\nstock: 324\n----------------------------------------------\nid: 5\nname: 【義美】義美小泡芙（檸檬風味）171g/盒\nprice: 64\nstock: 64\n----------------------------------------------\nid: 6\nname: 【洋芋片】波的多超厚切洋芋片-蚵仔煎味\nprice: 53\nstock: 182\n----------------------------------------------\nid: 7\nname: 【義美】義美小蛋卷（原味）\nprice: 49\nstock: 313\n----------------------------------------------\nid: 8\nname: 品客碳烤BBQ口味洋芋片\nprice: 55\nstock: 158\n----------------------------------------------\n</code></pre><p>另外開一個 redis client 來異動資料：</p>\n<pre><code>simon@simon:~/demos$ redis-cli\n127.0.0.1:6379&gt; HMSET product:9 name &apos;旺旺 仙貝經濟包&apos; price 469 stock 79\nOK\n127.0.0.1:6379&gt; HMSET product:9 name &apos;旺旺 仙貝經濟包&apos; price 469 stock 75\nOK\n127.0.0.1:6379&gt; DEL product:9\n(integer) 1\n127.0.0.1:6379&gt; \n</code></pre><p>可以在 notify.php 的輸出畫面看到新的訊息：</p>\n<pre><code>新增 product_store 項目:\nid: 9\nname: 旺旺 仙貝經濟包\nprice: 469\nstock: 79\n\n更改 product_store 項目:\nid: 9\nstock: 75\n\n刪除 product_store 項目:\nid: 9\n</code></pre><h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>這邊介紹 redis 如何實現資料異動通知的功能。不過要注意的是 redis 不會保存通知過的訊息，因此如果對 redis 的連線斷線的話，斷線的應用程式是無法再取得斷線期間的異動通知。<br>如果非常在意事件一定要通知到的話，要自己想辦法把事件保留起來，官網上說未來 redis 可能會將這些通知保留再另外的 SET 內，不過現階段還沒有，可能要自己實作保存事件的部份。</p>\n","excerpt":"","more":"<h1 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h1><p>在實現事件驅動設計的過程中，能夠讓資料庫在異動資料時自動發出通知是一個重要的環節，如此一來就不需要有另外一支程式不斷去查詢資料庫的異動，可以節省系統資源。<br>本篇探討將使用 redis 的 keyspace notification 功能來實現資料異動的即時通知，並且以 PHP 程式來實作。<br>本篇將會以一個線上購物網站的物品庫存清單為例，展示如何實作即時顯示當前貨品庫存量的功能。</p>\n<h1 id=\"redis-資料結構規劃\"><a href=\"#redis-資料結構規劃\" class=\"headerlink\" title=\"redis 資料結構規劃\"></a>redis 資料結構規劃</h1><p>商品的資料儲存在 product:#id 的 hash，<br>並建立一個 set 用來維護商品清單。</p>\n<table>\n<thead>\n<tr>\n<th>data type</th>\n<th>key</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>set</td>\n<td>product_ids</td>\n<td>商品總類清單</td>\n</tr>\n<tr>\n<td>hash</td>\n<td>product:#id</td>\n<td>商品細節</td>\n</tr>\n</tbody>\n</table>\n<caption>表1: 資料結構規劃</caption>\n\n<p><caption>建立 redis 資料</capion></p>\n<pre><code>HMSET product:1 name &quot;多力多滋組合包-綜合 54g*4包/組&quot; price 55 stock 256\nHMSET product:2 name &quot;【洋芋片】Lays樂事瑞士香濃起司 97g/包&quot; price 32 stock 179\nHMSET product:3 name &quot;【蔓莓纖果】萬歲牌蔓莓纖果150G&quot;  price 59 stock 326\nHMSET product:4 name &quot;【蒜香青豆】盛香珍蒜香青豆 240g/包&quot; price 42 stock 324\nHMSET product:5 name &quot;【義美】義美小泡芙（檸檬風味）171g/盒&quot; price 64 stock 64\nHMSET product:6 name &quot;【洋芋片】波的多超厚切洋芋片-蚵仔煎味&quot; price 53 stock 182\nHMSET product:7 name &quot;【義美】義美小蛋卷（原味）&quot; price 49 stock 313\nHMSET product:8 name &quot;品客碳烤BBQ口味洋芋片&quot; price 55 stock 158\nSADD products 1\nSADD products 2\nSADD products 3\nSADD products 4\nSADD products 5\nSADD products 6\nSADD products 7\nSADD products 8\n</code></pre><h1 id=\"redis-keyspace-notification\"><a href=\"#redis-keyspace-notification\" class=\"headerlink\" title=\"redis keyspace notification\"></a>redis keyspace notification</h1><p>為了讓物品庫存數量能即時反應到應用程式，必須讓資料庫將資料的異動反應給應用程式，<br>這邊說明如何使用 redis 的 keyspace notification 功能來實現異動事件通知。<br>至於更詳細的說明可以看 <a href=\"http://redis.io/topics/notifications\" title=\"Redis Keyspace Notifications\">官網說明文件</a>。</p>\n<p>keyspace notification 可讓應用程式訂閱 keyspace 更動的事件，<br>當 redis 的資料有異動的時候有兩種類型的事件會被觸發：</p>\n<ol>\n<li>第一種讓我們可以監聽某個 key 是否被異動，當它被異動的時候，我們可以得知異動這個 key 的命令類型，稱為 keyspace 事件。</li>\n<li>第二種讓我們可以監聽是否有某個命令類型被執行，當它被執行時，透過這個事件，我們可以得知被這個命令影響到的 key，稱為 keyevent 事件。</li>\n</ol>\n<p>Redis 的事件通知是透過 PUB/SUB 來進行的，因此再使用前需先了解 Redis PUB/SUB 是如何進行的。<br>可以參考官網的文件 <a href=\"http://redis.io/topics/pubsub\" title=\"Redis PUB/SUB\">Redis PUB/SUB</a>。簡單來說就是一個客戶端訂閱了某個 channel, 另外一個客戶端可以發佈訊息到這個 channel,<br>然後前面那個訂閱的客戶端就可以收到第二個客戶端發送過來的訊息了。在 Redis keyspace notification 的應用中，Redis 會負責發佈訊息到指定的 channel, 我們只要接收這些訊息就可以了。<br>後面會討論這些 channel。</p>\n<p>在使用 keyspace notification 前，需要先打開這個功能，編輯 redis.conf 將 notify-keyspace-events 設成：</p>\n<pre><code>notify-keyspace-events &quot;KEA&quot;\n</code></pre><p>根據官網的說明，<br>K - Keyspace events<br>E - Keyevent event<br>A - All commands<br>KEA 代表要訂閱所有命令類型的第一種和第二種事件。<br>更改設定檔要重啟 redis 後才會生效。</p>\n<p>redis 的事件通知是透過 PUB/SUB 來進行的，因此當上述兩種事件發生的時候，redis 會分別發佈訊息到以下兩種 channel 上：</p>\n<pre><code>1. PUBLISH __keyspace@&lt;db id&gt;__:&lt;key name&gt; &lt;command type&gt;\n2. PUBLISH __keyevent@&lt;db id&gt;__:&lt;command type&gt; &lt;key name&gt; \n</code></pre><p>我們可以透過 PSUBSCRIBE 來訂閱這些事件：</p>\n<pre><code>1. PSUBSCRIBE __keyspace@*__:*\n2. PSUBSCRIBE __keyevent@*__:*\n</code></pre><p>假設我們要觀察 del test1 test2 test3 test4 指令對 keyspace 和 keyevent 的影響可以分別訂閱以下兩個 channel</p>\n<pre><code>127.0.0.1:6379&gt; PSUBSCRIBE __keyspace@*__:test*\nReading messages... (press Ctrl-C to quit)\n1) &quot;psubscribe&quot;\n2) &quot;__keyspace@*__:test*&quot;\n3) (integer) 1\n\n127.0.0.1:6379&gt; PSUBSCRIBE __keyevent@*__:del\nReading messages... (press Ctrl-C to quit)\n1) &quot;psubscribe&quot;\n2) &quot;__keyevent@*__:del&quot;\n3) (integer) 1\n</code></pre><p>設定要處理的 key</p>\n<pre><code>127.0.0.1:6379&gt; set test1 test1\nOK\n127.0.0.1:6379&gt; set test2 test2\nOK\n127.0.0.1:6379&gt; set test3 test3\nOK\n127.0.0.1:6379&gt; set test4 test4\n</code></pre><p>注意我這邊開了三個 terminal，分別執行三個 redis-cli，一個監聽對 test* 的異動，一個監聽 del 操作是否被執行，最後一個負責下各種指令。 </p>\n<p>在建立過程中，可以看到對 keyspace 的監聽訊息如下：</p>\n<pre><code>127.0.0.1:6379&gt; PSUBSCRIBE __keyspace@*__:test*\nReading messages... (press Ctrl-C to quit)\n1) &quot;psubscribe&quot;\n2) &quot;__keyspace@*__:test*&quot;\n3) (integer) 1\n1) &quot;pmessage&quot;\n2) &quot;__keyspace@*__:test*&quot;\n3) &quot;__keyspace@0__:test1&quot;\n4) &quot;set&quot;\n1) &quot;pmessage&quot;\n2) &quot;__keyspace@*__:test*&quot;\n3) &quot;__keyspace@0__:test2&quot;\n4) &quot;set&quot;\n1) &quot;pmessage&quot;\n2) &quot;__keyspace@*__:test*&quot;\n3) &quot;__keyspace@0__:test3&quot;\n4) &quot;set&quot;\n1) &quot;pmessage&quot;\n2) &quot;__keyspace@*__:test*&quot;\n3) &quot;__keyspace@0__:test4&quot;\n4) &quot;set&quot;\n</code></pre><p>注意 <code>127.0.0.1:6379&gt; PSUBSCRIBE __keyevent@*__:del</code> 那個 redis-cli 沒有任何更新，因為沒有任何 del 操作被執行。<br>現在刪除 test, tests, test3, test4：</p>\n<pre><code>127.0.0.1:6379&gt; del test1 test2 test3 test4\n(integer) 4\n</code></pre><p>可以看到對 keyspace (<code>127.0.0.1:6379&gt; PSUBSCRIBE __keyspace@*__:test*</code>) 的監聽如下：</p>\n<pre><code>1) &quot;pmessage&quot;\n2) &quot;__keyspace@*__:test*&quot;\n3) &quot;__keyspace@0__:test1&quot;\n4) &quot;del&quot;\n1) &quot;pmessage&quot;\n2) &quot;__keyspace@*__:test*&quot;\n3) &quot;__keyspace@0__:test2&quot;\n4) &quot;del&quot;\n1) &quot;pmessage&quot;\n2) &quot;__keyspace@*__:test*&quot;\n3) &quot;__keyspace@0__:test3&quot;\n4) &quot;del&quot;\n1) &quot;pmessage&quot;\n2) &quot;__keyspace@*__:test*&quot;\n3) &quot;__keyspace@0__:test4&quot;\n4) &quot;del&quot;\n</code></pre><p>對 keyevent (<code>127.0.0.1:6379&gt; PSUBSCRIBE __keyevent@*__:del</code>)的監聽如下：</p>\n<pre><code>1) &quot;pmessage&quot;\n2) &quot;__keyevent@*__:del&quot;\n3) &quot;__keyevent@0__:del&quot;\n4) &quot;test1&quot;\n1) &quot;pmessage&quot;\n2) &quot;__keyevent@*__:del&quot;\n3) &quot;__keyevent@0__:del&quot;\n4) &quot;test2&quot;\n1) &quot;pmessage&quot;\n2) &quot;__keyevent@*__:del&quot;\n3) &quot;__keyevent@0__:del&quot;\n4) &quot;test3&quot;\n1) &quot;pmessage&quot;\n2) &quot;__keyevent@*__:del&quot;\n3) &quot;__keyevent@0__:del&quot;\n4) &quot;test4&quot;\n</code></pre><p>從上面的結果我們可以知道一個命令對多個 key 的操作，是會引發多次 keyspace 事件和 keyevent 事件的。<br>然後我們透過這些事件只能知道是甚麼 key 被影響、被甚麼指令影響，而不知道 key 被異動後的資料，如果想要知道 key 的最新資料則要自己再去讀取那個 key。</p>\n<h1 id=\"使用-Predis-在-PHP-中操作-redis\"><a href=\"#使用-Predis-在-PHP-中操作-redis\" class=\"headerlink\" title=\"使用 Predis 在 PHP 中操作 redis\"></a>使用 Predis 在 PHP 中操作 redis</h1><p>建立一個 redis-notify 專案</p>\n<pre><code>mkdir redis-notofy\n</code></pre><p>我們這邊使用 composer 來取得 Predis Async, 使用非同步版本的 Predis 比較適合這種監聽事件的任務。<br>關於 composer 的使用可以參考 <a href=\"https://getcomposer.org/\" title=\"Composer\">composer 官網說明文件</a>。<br>關於 Predis Async 的介紹可以參考 <a href=\"https://packagist.org/packages/predis/predis\">Predis Async</a>。</p>\n<p>在該專案內建立 composer.json 如下：</p>\n<pre><code>{\n  &quot;require&quot;:{&quot;predis/predis-async&quot;:&quot;dev-master&quot;}\n}\n</code></pre><p>執行 <code>composer install</code> 來從 Packagist 下載 Predis-Async</p>\n<pre><code>compsoer install\n</code></pre><p>可以開始用 Predis 了，編輯程式檔 notify.php 如下：</p>\n<pre><code>&lt;?php\nrequire __DIR__.&apos;/vendor/autoload.php&apos;;\n\nclass LocalStorage\n{\n    private $product_store = []; // 目前所有 products\n\n    /**\n     * 使用前更新目前所有 products\n     * @param \\Predis\\Client $client_sync\n     */\n    public function init(\\Predis\\Client $client_sync)\n    {\n        $all_product_keys = $client_sync-&gt;keys(&apos;product:*&apos;);\n        foreach ($all_product_keys as $product_key) {\n            // 抓取 id\n            preg_match(&apos;/product:(\\d+)/&apos;, $product_key, $matches);\n            $id = $matches[1];\n            // 設定 id=&gt;product 關聯\n            $this-&gt;product_store[$id] = $client_sync-&gt;hgetall($product_key);\n        }\n        // 排序 product_store\n        ksort($this-&gt;product_store);\n    }\n\n    /**\n     * 判斷 id 是否在 product_store 內\n     * @param $id\n     * @return bool\n     */\n    public function contains($id)\n    {\n        if (isset($this-&gt;product_store[$id])) {\n            return true;\n        }\n        return false;\n    }\n\n\n    /**\n     * 處理新增事件\n     * @param $id\n     * @param $product\n     */\n    function insertHandler($id, $product)\n    {\n        echo &quot;新增 product_store 項目:\\n&quot;;\n        echo &quot;id: $id\\n&quot;;\n        echo &quot;name: {$product[&apos;name&apos;]}\\n&quot;;\n        echo &quot;price: {$product[&apos;price&apos;]}\\n&quot;;\n        echo &quot;stock: {$product[&apos;stock&apos;]}\\n\\n&quot;;\n        $this-&gt;product_store[$id] = $product;\n    }\n\n\n    /**\n     * 處理更改事件\n     * @param $id\n     * @param $product\n     */\n    function updateHandler($id, $product)\n    {\n        echo &quot;更改 product_store 項目:\\n&quot;;\n        echo &quot;id: $id\\n&quot;;\n        if ($this-&gt;product_store[$id][&apos;name&apos;] !== $product[&apos;name&apos;]) {\n            echo &quot;name: {$product[&apos;name&apos;]}\\n&quot;;\n            $this-&gt;product_store[$id][&apos;name&apos;] = $product[&apos;name&apos;];\n        }\n        if ($this-&gt;product_store[$id][&apos;price&apos;] !== $product[&apos;price&apos;]) {\n            echo &quot;price: {$product[&apos;price&apos;]}\\n&quot;;\n            $this-&gt;product_store[$id][&apos;price&apos;] = $product[&apos;price&apos;];\n        }\n        if ($this-&gt;product_store[$id][&apos;stock&apos;] !== $product[&apos;stock&apos;]) {\n            echo &quot;stock: {$product[&apos;stock&apos;]}\\n&quot;;\n            $this-&gt;product_store[$id][&apos;stock&apos;] = $product[&apos;stock&apos;];\n        }\n        echo &quot;\\n&quot;;\n    }\n\n    /**\n     * 處理刪除事件\n     * @param $id\n     * @param $product\n     */\n    function deleteHandler($id, $product)\n    {\n        echo &quot;刪除 product_store 項目:\\n&quot;;\n        echo &quot;id: $id\\n\\n&quot;;\n        unset($this-&gt;product_store[$id]);\n    }\n\n    /**\n     * 顯示 product_store\n     */\n    function showStore()\n    {\n        foreach ($this-&gt;product_store as $id =&gt; $product) {\n            echo &quot;id: $id\\n&quot;;\n            echo &quot;name: {$product[&apos;name&apos;]}\\n&quot;;\n            echo &quot;price: {$product[&apos;price&apos;]}\\n&quot;;\n            echo &quot;stock: {$product[&apos;stock&apos;]}\\n&quot;;\n            echo &quot;----------------------------------------------\\n&quot;;\n        }\n    }\n\n}\n\n$client = new Predis\\Async\\Client(&apos;tcp://127.0.0.1:6379&apos;);\n$client_sync = new Predis\\Client(&apos;tcp://127.0.0.1:6379&apos;);\n\n$local_storage = new LocalStorage();\n$local_storage-&gt;init($client_sync);\n$local_storage-&gt;showStore();\n\n\n/**\n * 註冊處理 keyspace 異動的事件，並根據事件的訊息做相應的處理\n */\n$client-&gt;connect(function ($client) use ($client_sync, $local_storage) {\n    // 使用 psubscribe 訂閱 product:#id 這種樣式的 key 被異動的事件\n    $client-&gt;pubSubLoop([&apos;psubscribe&apos;=&gt;&apos;__keyspace@*__:product:*&apos;],\n    function ($event, $pubsub) use ($client_sync, $local_storage) {\n        // 當 product:#id 被異動的時候，根據事件發生的 channel 的名稱取得 key 的名稱和 product 的 id\n        if (preg_match(&apos;/__keyspace@\\d+__:(product:(\\d+))/&apos;, $event-&gt;channel, $matches)) {\n            $product_key = $matches[1];\n            $product_id = $matches[2];\n            // 取得被異動後，最新的 product 資料\n            $product = $client_sync-&gt;hgetall($product_key);\n            // 根據事件傳來的訊息得知操作 key 的類型\n            $op = $event-&gt;payload;\n            if ($op === &apos;del&apos;) {\n                $local_storage-&gt;deleteHandler($product_id, $product);\n            } else if ($op === &apos;hset&apos;) {\n                // 當操作類型是 hset 的時候，需要從目前的 product store 去判斷是新增還是修改\n                if ($local_storage-&gt;contains($product_id)) {\n                    $local_storage-&gt;updateHandler($product_id, $product);\n                } else {\n                    $local_storage-&gt;insertHandler($product_id,$product);\n                }\n            }\n        }\n    });\n});\n// 開始監聽 keyspace 異動事件\n$client-&gt;getEventLoop()-&gt;run();\n</code></pre><p>這個程式維護一個本地的商品清單，並且隨時接收 redis 的最新異動來更新本地清單。<br>首先先建立一個 LocalStorage 物件來管理本地商品清單的增刪查改。<br>然後使用 Predis Async 來訂閱所有關於 product：* 的異動，<br>redis 的 keyspace notification 對要監聽的每個 key 都建立一個 channel<br>要訂閱的 channel 樣式如下：</p>\n<pre><code>__keyspace@*__:product:*\n</code></pre><p>然後當資料異動事件發生的時候，可以取得 channel 的名稱和從 channel 傳遞過來的訊息：</p>\n<pre><code>channel 的名稱： __keyspace@0__:product:1\nchannel 的訊息： hset\n</code></pre><p>因此我們可以從 channel 的名稱取得被異動的 key 的名稱 product:1，當然也可以只取得部份的 key 名稱 1，來作為 id。<br>然後可以從 channel 傳遞過來的訊息得知是甚麼操作異動了 key，這裡是 hset。<br>關於各種類型的操作會傳遞甚麼訊息可以查看官網的說明 <a href=\"http://redis.io/topics/notifications\" title=\"Redis Keyspace Notifications\">官網說明文件</a>。<br>詳細的程式可以在 <a href=\"https://github.com/smjhang/demos\">我的 github 上的 demos 專案</a> 下載，放在 redis-notify 資料夾內。</p>\n<p>執行程式可以看到以下結果：</p>\n<pre><code>simon@simon:~/demos/redis-notify$ php notify.php \nid: 1\nname: 多力多滋組合包-綜合 54g*4包/組\nprice: 55\nstock: 256\n----------------------------------------------\nid: 2\nname: 【洋芋片】Lays樂事瑞士香濃起司 97g/包\nprice: 32\nstock: 179\n----------------------------------------------\nid: 3\nname: 【蔓莓纖果】萬歲牌蔓莓纖果150G\nprice: 59\nstock: 326\n----------------------------------------------\nid: 4\nname: 【蒜香青豆】盛香珍蒜香青豆 240g/包\nprice: 42\nstock: 324\n----------------------------------------------\nid: 5\nname: 【義美】義美小泡芙（檸檬風味）171g/盒\nprice: 64\nstock: 64\n----------------------------------------------\nid: 6\nname: 【洋芋片】波的多超厚切洋芋片-蚵仔煎味\nprice: 53\nstock: 182\n----------------------------------------------\nid: 7\nname: 【義美】義美小蛋卷（原味）\nprice: 49\nstock: 313\n----------------------------------------------\nid: 8\nname: 品客碳烤BBQ口味洋芋片\nprice: 55\nstock: 158\n----------------------------------------------\n</code></pre><p>另外開一個 redis client 來異動資料：</p>\n<pre><code>simon@simon:~/demos$ redis-cli\n127.0.0.1:6379&gt; HMSET product:9 name &apos;旺旺 仙貝經濟包&apos; price 469 stock 79\nOK\n127.0.0.1:6379&gt; HMSET product:9 name &apos;旺旺 仙貝經濟包&apos; price 469 stock 75\nOK\n127.0.0.1:6379&gt; DEL product:9\n(integer) 1\n127.0.0.1:6379&gt; \n</code></pre><p>可以在 notify.php 的輸出畫面看到新的訊息：</p>\n<pre><code>新增 product_store 項目:\nid: 9\nname: 旺旺 仙貝經濟包\nprice: 469\nstock: 79\n\n更改 product_store 項目:\nid: 9\nstock: 75\n\n刪除 product_store 項目:\nid: 9\n</code></pre><h1 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h1><p>這邊介紹 redis 如何實現資料異動通知的功能。不過要注意的是 redis 不會保存通知過的訊息，因此如果對 redis 的連線斷線的話，斷線的應用程式是無法再取得斷線期間的異動通知。<br>如果非常在意事件一定要通知到的話，要自己想辦法把事件保留起來，官網上說未來 redis 可能會將這些通知保留再另外的 SET 內，不過現階段還沒有，可能要自己實作保存事件的部份。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cirf9ei8w00004kgfnlvrnlzk","tag_id":"cirf8xkrk00011zgf221ayp90","_id":"cirf9ei8z00014kgf7qi9mzmg"}],"Tag":[{"name":"redis","_id":"cirf8xkrk00011zgf221ayp90"}]}}